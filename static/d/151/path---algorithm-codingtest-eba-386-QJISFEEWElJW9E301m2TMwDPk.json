{"data":{"site":{"siteMetadata":{"title":"Bee starter","author":"[Your Name]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"9bb6722c-a521-5896-8a02-e7df74612e2a","excerpt":"프로그래밍 1문제 설명\n폭탄 던지기 게임을 하려고 합니다. 1부터 N의 번호를 가진 사람들이 원형 탁자에 시계방향으로 앉아있습니다. 처음에는 1번 사람이 폭탄을 가지고 있습니다. 1번 사람은 폭탄을 다른 사람에게 던집니다. 폭탄을 받은 사람은 다른 사람에게 다시 폭탄을 던집니다. 폭탄을 던지는 방식은 폭탄을 받은 사람이 폭탄을 받은 횟수가 짝수 번이면 현재 자신을 기준으로 오른쪽으로 K 번째 있는 사람에게 폭탄을 던지고, 홀수 번이면 현재 자신을 기준으로 왼쪽으로 K…","html":"<h3 id=\"프로그래밍-1\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1\" aria-label=\"프로그래밍 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 1</h3>\n<p>문제 설명\n폭탄 던지기 게임을 하려고 합니다. 1부터 N의 번호를 가진 사람들이 원형 탁자에 시계방향으로 앉아있습니다. 처음에는 1번 사람이 폭탄을 가지고 있습니다. 1번 사람은 폭탄을 다른 사람에게 던집니다. 폭탄을 받은 사람은 다른 사람에게 다시 폭탄을 던집니다. 폭탄을 던지는 방식은 폭탄을 받은 사람이 폭탄을 받은 횟수가 짝수 번이면 현재 자신을 기준으로 오른쪽으로 K 번째 있는 사람에게 폭탄을 던지고, 홀수 번이면 현재 자신을 기준으로 왼쪽으로 K 번째 있는 사람에게 폭탄을 던집니다. 단, 폭탄을 받은 사람이 폭탄을 M 번 받았으면 폭탄이 터지고 게임이 종료됩니다.\n매개변수로 N, M, K가 주어질 때, 게임이 종료될 때까지 폭탄이 몇 번 던져지는지를 return 하도록 solution 함수를 완성해 주세요.</p>\n<p>제한사항\nN : 2 이상 2000 이하의 자연수\nM : 2000 이하의 자연수\nK : N-1 이하의 자연수\n입출력 예\nN M K answer\n3 3 2 6\n입출력 예 설명\n입출력 예 #1\n처음에는 1번 사람이 폭탄을 가지고 있습니다.</p>\n<p>1번 사람은 폭탄을 한번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 왼쪽으로 2번째인 3번 사람에게 폭탄을 던집니다.\n3번 사람은 폭탄을 한번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 왼쪽으로 2번째인 2번 사람에게 폭탄을 던집니다.\n2번 사람은 폭탄을 한번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 왼쪽으로 2번째인 1번 사람에게 폭탄을 던집니다.\n1번 사람은 폭탄을 두번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 오른쪽으로 2번째인 2번 사람에게 폭탄을 던집니다.\n2번 사람은 폭탄을 두번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 오른쪽으로 2번째인 3번 사람에게 폭탄을 던집니다.\n3번 사람은 폭탄을 두번 받았기 때문에 홀수 번이므로 현재 자신을 기준으로 오른쪽으로 2번째인 1번 사람에게 폭탄을 던집니다.\n1번 사람은 폭탄을 세번 받았기 때문에 게임이 종료됩니다.\n이때, 게임이 종료될 때까지 폭탄을 6번 던졌으므로 6을 return 하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function solution(n, m, k) {\n  let boomCount = 0;\n  let target = 1;\n  let personCounts = {\n    [target]: 1\n  };\n  while(true) {\n    const personCount = personCounts[target];\n    if(personCount % 2) {\n      target = (target + k) % n;\n      target = target === 0 ? n : target;\n    } else {\n      target -= k;\n      target = target &lt; 1 ? n + target : target;\n    }\n    personCounts[target] = personCounts[target] ? personCounts[target] + 1 : 1;\n    boomCount++;\n    if(personCounts[target] === m) {\n      break;\n    }\n  }\n  return boomCount;\n}\n\nsolution(3, 3, 2);</code></pre></div>\n<h3 id=\"프로그래밍-3\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-3\" aria-label=\"프로그래밍 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래밍 3</h3>\n<p>문제 설명\nn 개의 ’(’ 와 m 개의 ’)’ 를 이용해 문자열을 만들려고 합니다. 이때, 완성된 문자열이 반드시 올바른 괄호 문자열일 필요는 없으며, 반드시 모든 문자를 사용해야 합니다. ’(’ 의 개수 n과 ’)‘의 개수 m이 매개변수로 주어질 때, n개의 ’(‘와 m개의 ’)‘를 모두 사용해서 만들 수 있는 문자열의 개수를 return 하도록 solution 함수를 완성해주세요.</p>\n<p>제한사항\nn은 1이상 16이하의 자연수입니다.\nm은 1이상 16이하의 자연수입니다.\n정답은 231 - 1 이하의 자연수입니다.\n입출력 예\nn m result\n1 1 2\n1 2 3\n입출력 예 설명\n입출력 예 #1\n(), )( 의 2가지 문자열을 만들 수 있습니다.</p>\n<p>입출력 예 #2\n()), )(), ))( 의 3가지 문자열을 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> all <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> nFilter <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> mFilter <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> all <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>nFilter <span class=\"token operator\">*</span> mFilter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"codingtest","date":"May 19, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algorithm/codingtest/","previous":{"fields":{"slug":"/algorithm/proframmers-level3/"},"frontmatter":{"title":"proframmers-level3","category":"algorithm"}},"next":{"fields":{"slug":"/nomadcoders/react-native-weather/"},"frontmatter":{"title":"React Native로 날씨앱 만들기","category":"nomadcoders"}}}}