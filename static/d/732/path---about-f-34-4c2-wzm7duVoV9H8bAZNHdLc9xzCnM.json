{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"17dd787d-255d-53f3-9eaa-fc5ea0d5e220","excerpt":"jQuery의 상태 관리Base가 되는 DOM에다가 데이터를 저장하는 형태로 상태를 관리해왔다.만일 Ajax로 데이터가 변경된다면, 엘리먼트가 가지고 있는 데이터가 다르게 된다.jQuery 상태 관리 저장jQuery 개발은 DOM에 jQuery로 동작을 입히는 것DOM…","html":"<!-- ---\ntitle: data-status-management\ndate: 2019-05-30 16:05:72\ncategory: development\n--- -->\n<h2 id=\"jquery의-상태-관리\"><a href=\"#jquery%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"jquery의 상태 관리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jQuery의 상태 관리</h2>\n<p>Base가 되는 DOM에다가 데이터를 저장하는 형태로 상태를 관리해왔다.</p>\n<div data-seq=\"\" data-title=\"\" />\n<p>만일 Ajax로 데이터가 변경된다면, 엘리먼트가 가지고 있는 데이터가 다르게 된다.</p>\n<h3 id=\"jquery-상태-관리-저장\"><a href=\"#jquery-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%A0%80%EC%9E%A5\" aria-label=\"jquery 상태 관리 저장 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jQuery 상태 관리 저장</h3>\n<ul>\n<li>jQuery 개발은 DOM에 jQuery로 동작을 입히는 것</li>\n<li>DOM이 베이스</li>\n<li>각 Element에 상태를 저장</li>\n<li>서로 다른 Element의 상태 변화 추적이 어려움</li>\n</ul>\n<p>따라서 복잡한 앱에서는 점점 유지보수 비용이 커지게 된다.</p>\n<h2 id=\"angularjs-상태-관리\"><a href=\"#angularjs-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"angularjs 상태 관리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AngularJS 상태 관리</h2>\n<p>기존 방식(DOM 제어방식)은 변경이 필요한 대상 DOM 요소를 먼저 선택하고, 이후 필요한 작업을 수행하는 형태로 진행하게 됩니다. 반면 AngularJS는 출력할 데이터에 초점을 맞추어 작업이 수행되며, 데이터의 값이 변경되면 출력도 자동적으로 수행되도록 처리됩니다.\n<a href=\"https://d2.naver.com/helloworld/1172239\">https://d2.naver.com/helloworld/1172239</a></p>\n<h3 id=\"기본-개념\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90\" aria-label=\"기본 개념 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 개념</h3>\n<p>컨트롤러라는 지시자를 이용하여 마크업 상에 영역 생성</p>\n<p>서비스 - LOGIC / STATE => 컨트롤러 - LOGIC / STATE => VIEW</p>\n<p>데이터 호출 중</p>\n<h2 id=\"redux-상태-관리\"><a href=\"#redux-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"redux 상태 관리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux 상태 관리</h2>\n<p>상태(데이터)를 언제, 왜, 어떻게 변화했는지 알기가 어려움</p>\n<h3 id=\"flux\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLUX</h3>\n<p>단반향\nAction -> Dispatcher -> Stroe -> View -> Action …</p>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"60c5502b-f947-5c45-8cac-748ecb92bc66","excerpt":"1. 들어가며..npm에 다양한 Hooks가 등록되어 있습니다.\n그리고 해당 강의에서는 Hooks Library를 직접 구현하고 npm에 배포하는 과정까지 설명합니다.useInput useTabs useTitle useClick useHover useConfirm…","html":"<!-- ---\ntitle: 실전형 리액트 Hooks\ndate: 2019-06-07 09:06:46\ncategory: react\n--- -->\n<h2 id=\"1-들어가며\"><a href=\"#1-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"1 들어가며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 들어가며..</h2>\n<p>npm에 다양한 Hooks가 등록되어 있습니다.\n그리고 해당 강의에서는 Hooks Library를 직접 구현하고 npm에 배포하는 과정까지 설명합니다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useInput <code class=\"language-text\">단순 input 역할</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useTabs <code class=\"language-text\">메뉴 등 탭을 사용하기 쉽게 해준다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useTitle <code class=\"language-text\">Document의 title 변경</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useClick <code class=\"language-text\">클릭 이벤트 감지</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useHover <code class=\"language-text\">hover 이벤트 감지</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useConfirm <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> usePreventLeave <code class=\"language-text\">유저가 변경사항을 저장하지 않고 페이지를 벗어나길 원할 때</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useBeforeLeave</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useFadeIn <code class=\"language-text\">fadeIn 애니메이션 실행</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useNetwork <code class=\"language-text\">online / offline 상태 감지</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useFullscreen <code class=\"language-text\">Element를 풀스크린으로 변환</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useNotification <code class=\"language-text\">notification API를 사용할 때 유저에게 알림</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useScroll <code class=\"language-text\">스크롤 시 이벤트 감지</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> useAxios</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://academy.nomadcoders.co/p/introduction-to-react-hooks/\">Nomadcoders</a></p>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"515b1ca3-d292-5074-a2c2-8dbb7cc6cd0b","excerpt":"1.+-----+\n|12345|\n+-----+","html":"<p>1.</p>\n<div id=\"brinza-task-description\">\n<p>You have an array of numbers and you would like to print these numbers in a tabular format to make them look more organized. Each cell of the table contains exactly one number and is surrounded by exactly four edges:</p>\n<tt style=\"white-space:pre-wrap\">+-+\n|4|\n+-+\n<p>+-----+\n|12345|\n+-----+</tt></p>\n<p>As you can see above, each corner of the cell is represented by a \"<tt style=\"white-space:pre-wrap\">+</tt>\" sign, vertical edges by \"<tt style=\"white-space:pre-wrap\">-</tt>\" signs and horizontal edges by \"<tt style=\"white-space:pre-wrap\">|</tt>\" signs. The width of the cell adjusts to accommodate the number of digits of the number written within it. There can be many cells in a row. Adjacent cells share an edge:</p>\n<tt style=\"white-space:pre-wrap\">+---+---+---+---+\n|  4| 35| 80|123|\n+---+---+---+---+</tt>\n<p>Note that each cell has the same width. The width of the cell adjusts to match the width of the longest number in the table. The numbers in cells are aligned to the right, with any unused area in each cell filled with spaces.</p>\n<p>The table can consist of many rows, and adjacent rows share an edge:</p>\n<tt style=\"white-space:pre-wrap\">+-----+-----+-----+-----+\n|    4|   35|   80|  123|\n+-----+-----+-----+-----+\n|12345|   44|    8|    5|\n+-----+-----+-----+-----+\n|   24|    3|   22|   35|\n+-----+-----+-----+-----+</tt>\n<p>Your goal is to output a table containing all the numbers from a given array such that each row contains exactly K numbers. The last row can contain fewer numbers.</p>\n<p>Write a function:</p>\n<blockquote><p style=\"font-family: monospace; font-size: 9pt; display: block; white-space: pre-wrap\"><tt>function solution(A, K);</tt></p></blockquote>\n<p>that, given a non-empty array A consisting of N integers and an integer K, prints a string representing the formatted array. The numbers in the table should appear in the same order as the numbers in the array.</p>\n<p>For example, given array A = [4, 35, 80, 123, 12345, 44, 8, 5] and K = 10, the resultant table will contain exactly one row, as shown below:</p>\n<tt style=\"white-space:pre-wrap\">+-----+-----+-----+-----+-----+-----+-----+-----+\n|    4|   35|   80|  123|12345|   44|    8|    5|\n+-----+-----+-----+-----+-----+-----+-----+-----+</tt>\n<p>For A = [4, 35, 80, 123, 12345, 44, 8, 5, 24, 3], K = 4, the table would appear as follows:</p>\n<tt style=\"white-space:pre-wrap\">+-----+-----+-----+-----+\n|    4|   35|   80|  123|\n+-----+-----+-----+-----+\n|12345|   44|    8|    5|\n+-----+-----+-----+-----+\n|   24|    3|\n+-----+-----+</tt>\n<p>Given A = [4, 35, 80, 123, 12345, 44, 8, 5, 24, 3, 22, 35] and K = 4, the table would appear as follows:</p>\n<tt style=\"white-space:pre-wrap\">+-----+-----+-----+-----+\n|    4|   35|   80|  123|\n+-----+-----+-----+-----+\n|12345|   44|    8|    5|\n+-----+-----+-----+-----+\n|   24|    3|   22|   35|\n+-----+-----+-----+-----+</tt>\n<p>The function shouldn't return any value.</p>\n<p>You can print a string to the output (without or with the end-of-line character) as follows:</p>\n<blockquote><p style=\"font-family: monospace; font-size: 9pt; display: block; white-space: pre-wrap\"><tt>process.stdout.write('sample string');\nprocess.stdout.write('whole line\\n');</tt></p></blockquote>\n<p>Assume that:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>N is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">200</span>];</li>\n<li>K is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">1,000,000,000</span>];</li>\n<li>each element of array A is an integer within the range [<span class=\"number\">0</span>..<span class=\"number\">1,000,000,000</span>].</li>\n</ul>\n</blockquote><p>In your solution, focus on <b><b>correctness</b></b>. The performance of your solution will not be the focus of the assessment.</p>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">pad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> width</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> width <span class=\"token operator\">?</span> n <span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> n<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paintBorder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">repeatCount<span class=\"token punctuation\">,</span> borderLength</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> border <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> borderLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    border <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>repeatCount<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">+`</span></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>border<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n`</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> repeatCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">paintBorder</span><span class=\"token punctuation\">(</span>repeatCount<span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token constant\">K</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">%</span> <span class=\"token constant\">K</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      answer <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`|\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">paintBorder</span><span class=\"token punctuation\">(</span>repeatCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n      count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    answer <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`|</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">pad</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> repeatCount<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  answer <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`|\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">paintBorder</span><span class=\"token punctuation\">(</span>repeatCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div id=\"brinza-task-description\">\n<p>You are in a browser-like environment, where you have access to the window object, the document object, and also $ − the jQuery library. The document contains a two-dimensional table. Each cell of the table has an upper-case letter in it and has its background color and text color set. Your task is simply to read the letters in row-major order (top to bottom, left to right), concatenate them into a single string and return it. However, you need to skip the letters that cannot be seen by the human eye. These are the ones whose colour is exactly the same as their background (that is, even marginal difference can be distinguished by a human eye).</p>\n<p>The table is created using \"<tt style=\"white-space:pre-wrap\">table</tt>\", \"<tt style=\"white-space:pre-wrap\">tbody</tt>\", \"<tt style=\"white-space:pre-wrap\">tr</tt>\" and \"<tt style=\"white-space:pre-wrap\">td</tt>\" tags. Each \"<tt style=\"white-space:pre-wrap\">td</tt>\" tag has a \"<tt style=\"white-space:pre-wrap\">style</tt>\" attribute with its CSS \"<tt style=\"white-space:pre-wrap\">background-color</tt>\" and \"<tt style=\"white-space:pre-wrap\">color</tt>\" attributes set. There is the same number of cells in each row.</p>\n<p>Write a function</p>\n<tt style=\"white-space:pre-wrap\">    function solution();</tt>\n<p>that, given a DOM tree representing an HTML document, returns a string containing all visible letters, read in row-major order.</p>\n<p>For example, given a document which has the following table in its body:</p>\n<tt style=\"white-space:pre-wrap\">    &lt;table&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td style=\"color: #ff00ff; background-color:#FFFFFF\"&gt;Q&lt;/TD&gt;\n            &lt;td style=\"background-color: #442244; color: #442244\"&gt;Y&lt;/td&gt;\n            &lt;td style=\"color: #FFFF00; background-color:#442244\"&gt;A&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td style=\"color: #FFEEFE; background-color:#990000\"&gt;Q&lt;/td&gt;\n            &lt;td style=\"color: #FFFF00; background-color:#FF0\"&gt;M&lt;/td&gt;\n            &lt;td style=\"color: #000000; background-color:#FF7777\"&gt;O&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;</tt>\n<p>which, when displayed in a browser, produces the following output:</p>\n    <table style=\"margin: 0 auto\">\n        <tbody>\n        <tr>\n            <td style=\"color: #ff00ff; background-color:#FFFFFF\">Q</td>\n            <td style=\"background-color: #442244; color: #442244\">Y</td>\n            <td style=\"color: #FFFF00; background-color:#442244\">A</td>\n        </tr>\n        <tr>\n            <td style=\"color: #FFEEFE; background-color:#990000\">Q</td>\n            <td style=\"color: #FFFF00; background-color:#FF0\">M</td>\n            <td style=\"color: #000000; background-color:#FF7777\">O</td>\n        </tr>\n        </tbody>\n    </table><p>your function should return \"<tt style=\"white-space:pre-wrap\">QAQO</tt>\", since the letters \"<tt style=\"white-space:pre-wrap\">Y</tt>\" and \"<tt style=\"white-space:pre-wrap\">M</tt>\" are invisible.</p>\n<p>Assume that:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>the DOM tree represents a valid HTML5 document;</li>\n<li>there is exactly one table in the document, it has at least one cell and every row has the same number of cells;</li>\n<li>the only child of <tt style=\"white-space:pre-wrap\">&lt;body&gt;</tt> is <tt style=\"white-space:pre-wrap\">&lt;table&gt;</tt>;</li>\n<li>the length of the HTML document does not exceed 4KB;</li>\n<li>jQuery 2.1 is supported;</li>\n<li>all colors are provided as hex codes;</li>\n<li>each pair of distinct colors occuring on input can be distinguished by a human eye (for example <tt style=\"white-space:pre-wrap\">#000000</tt> is different than <tt style=\"white-space:pre-wrap\">#000001</tt>).</li>\n</ul>\n</blockquote><p>In your solution, focus on <b><b>correctness</b></b>. The performance of your solution will not be the focus of the assessment.</p>\n</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * table의 td element를 불러옵니다.\n * 가져온 td element를 반복하며 backgroundColor, color 이 동일한지 비교합니다.\n * 동일한 경우 td 내 text를 return합니다.\n * return 된 요소를 배열로 만들고 join 합니다.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table tbody tr td'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-color'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> ele<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ele<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div id=\"brinza-task-description\">\n<p>You are given a DOM tree and have to analyze the <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> and <tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list tags within it. Your task is to find the maximum depth of nested <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list tags. A single <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list is nested one level deep. Each <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list inside another <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list is nested one level deeper. If there are no <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> or <tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> lists at all in the DOM tree, the depth of nesting is 0.</p>\n<p>Note that <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> lists can be nested directly or indirectly; that is, a <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> list inside a table inside an <tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list is nested two levels deep.</p>\n<p>For example, given an HTML document with the following contents within the <tt style=\"white-space:pre-wrap\">&lt;body&gt;</tt> tag:</p>\n<tt style=\"white-space:pre-wrap\">&lt;ul&gt;\n  &lt;li&gt;Item:\n     &lt;ol&gt;\n       &lt;li&gt;Point:\n         &lt;div&gt;\n           &lt;ul&gt;\n             &lt;li&gt;elem1&lt;/li&gt;\n           &lt;/ul&gt;\n         &lt;/div&gt;\n       &lt;/li&gt;\n     &lt;/ol&gt;\n  &lt;/li&gt;\n  &lt;li&gt;elem2&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul&gt;\n  &lt;li&gt;simple list1&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul&gt;\n&lt;/ul&gt;</tt>\n<p>there is a <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> list nested three levels deep. Namely, \"<tt style=\"white-space:pre-wrap\">elem1</tt>\" is in a <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> list which is inside an <tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list containing \"<tt style=\"white-space:pre-wrap\">Point</tt>\", while this <tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> list is inside another <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt> list containing \"<tt style=\"white-space:pre-wrap\">Item</tt>\".</p>\n<p>Write a function:</p>\n<tt style=\"white-space:pre-wrap\">    function solution();</tt>\n<p>that, given a DOM tree, returns the maximum depth of nested <tt style=\"white-space:pre-wrap\">&lt;ul&gt;</tt>/<tt style=\"white-space:pre-wrap\">&lt;ol&gt;</tt> lists. For example, given the DOM tree of the document shown above, the function should return 3, as explained above.</p>\n<p>Given the following content:</p>\n<tt style=\"white-space:pre-wrap\">&lt;ol&gt;\n  &lt;li&gt;\n    &lt;ol&gt;\n      &lt;li&gt;&lt;/li&gt;\n    &lt;/ol&gt;\n  &lt;/li&gt;\n&lt;/ol&gt;</tt>\n<p>the function should return 2.</p>\n<p>Assume that:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>the DOM tree represents a valid HTML5 document;</li>\n<li>length of the HTML document does not exceed 4KB;</li>\n<li>jQuery 2.1 is supported.</li>\n</ul>\n</blockquote></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * ul, ol 리스트를 불러 온 후, 각 ul, ol의 depth를 조회합니다.\n * depth가 저장된 depthList 에서 최대값을 return 합니다.\n *\n * ul, ol 태그가 없는 경우 0을 return 하도록 설정합니다.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> depthList <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul, ol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parents</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul, ol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> depthList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> depthList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"","date":null,"lang":null}}},{"node":{"id":"7fb64024-c360-5bb8-bc2d-7871948df033","excerpt":"DoririThank you for reading my resume. If you want to contact me, Please send me an email.","html":"<h1 id=\"doriri\"><a href=\"#doriri\" aria-label=\"doriri permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Doriri</h1>\n<div align=\"center\">\n<p><em>Thank you for reading my resume. If you want to contact me, Please send me an email.</em></p>\n</div>","frontmatter":{"title":"about","date":"January 27, 2019","lang":"en"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}