{"data":{"site":{"siteMetadata":{"title":"Doriri.io","author":"Doriri","siteUrl":"https://minhyeong-jang.github.io/doriri","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"doriri"}}},"markdownRemark":{"id":"ba243ac8-dc69-5fb8-981e-81e5e990df00","excerpt":"1. 들어가며..React에서 Context API를 사용하면 Redux처럼 하위 컴포넌트에서 props 전달 없이 호출이 가능하다.현재 프로젝트에서 Redux를 사용중이기에 따로 추가할 필요는 없었으나, Redux에 저장하기는 애매한데 하위에서 많이 사용하는 함수들을 처리하려고 공부해보았다.예를 들어, A 기능에서 onAbc라는 Function을 하위 컴포넌트로 전달할 때 Depth가 깊어질 수록 불필요한 코드 라인이 생겨 가독성이 안좋아진다.bComponent에서 onAbc…","html":"<h2 id=\"1-들어가며\"><a href=\"#1-%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"1 들어가며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 들어가며..</h2>\n<p>React에서 Context API를 사용하면 Redux처럼 하위 컴포넌트에서 props 전달 없이 호출이 가능하다.<br>\n현재 프로젝트에서 Redux를 사용중이기에 따로 추가할 필요는 없었으나, Redux에 저장하기는 애매한데 하위에서 많이 사용하는 함수들을 처리하려고 공부해보았다.</p>\n<p>예를 들어, A 기능에서 onAbc라는 Function을 하위 컴포넌트로 전달할 때 Depth가 깊어질 수록 불필요한 코드 라인이 생겨 가독성이 안좋아진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// aComponent : bComponent로 함수를 전달한다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aComponent</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bComponent</span> <span class=\"token attr-name\">onAbc</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onAbc<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bComponent</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aComponent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// bComponent : cComponent로 props로 전달받은 함수를 다시 넘긴다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bComponent</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cComponent</span> <span class=\"token attr-name\">onAbc</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onAbc<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bComponent</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>bComponent에서 onAbc 함수를 사용하지 않더라도 cComponent에 전달하기 위해 props로 받아야하는 불상사가 생기게 되며, 코드 라인이 한 줄 더 생기는 부분은 가독성과 더불어 미관적으로 매우 별로이다.</p>\n<p>따라서 context API를 사용하여 props를 불필요하게 전달하는 부분을 해결하기로 하였다.</p>\n<h2 id=\"2-context-api와-usecontext\"><a href=\"#2-context-api%EC%99%80-usecontext\" aria-label=\"2 context api와 usecontext permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Context API와 useContext</h2>\n<p>Context API는 jsx 코드 내에서 render props 형태로 작성해주어야했는데, Provider가 중복될 수록 코드가 지저분해지는 문제가 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 예시</span>\n<span class=\"token keyword\">const</span> Path <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/welcome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Name <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doriri'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Age <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Path.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">path</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Name.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Age.Consumer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token punctuation\">{</span><span class=\"token parameter\">age</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`Welcome back, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Age.Consumer</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Name.Consumer</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Path.Consumer</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 useContext를 사용하면 위의 문제가 사라지면서 더 깔끔한 코드를 작성할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 예시</span>\n<span class=\"token keyword\">const</span> Path <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/welcome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Name <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Doriri'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Age <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Welcome back, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>useContext를 사용하기 전과 비교했을 때 완벽해졌다.</p>\n<p>이러한 방식으로 외부 파일에서 접근을 진행하였다.</p>\n<h2 id=\"3-usecontext로-하위-컴포넌트에서-호출하기\"><a href=\"#3-usecontext%EB%A1%9C-%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"3 usecontext로 하위 컴포넌트에서 호출하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. useContext로 하위 컴포넌트에서 호출하기</h2>\n<p>하위 컴포넌트에서 사용할 때 다른 방식으로 호출할 것 같아서 많은 시간을 검색했지만,\n다들 한 파일에서만 사용하는 예제를 올려놔서 많은 시간을 삽질했다.. 하지만 방식은 매우 간단하였다.</p>\n<p>부모 컴포넌트에서 createContext로 생성한 Context를 export 해주고, 자식 컴포넌트에서 import 해주는 방법이였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 상위 컴포넌트</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> createContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ChildrenComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ChildrenComponent\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ParentContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ParentComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParentContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"asd\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildrenComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ParentContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ParentComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 자식 컴포넌트</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ParentContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ParentComponent\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ChildrenComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>ParentContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      id : </span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      value: </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ChildrenComponent<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 작성하면, <code class=\"language-text\">ParentContext.Provider</code> 안에 있는 자식들은 <code class=\"language-text\">ParentContext</code>를 import 한다면 어디서든 ParentContext의 value에 접근이 가능하다.</p>\n<p>나는 아래와 같이 함수도 context로 선언하여 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StockContext.Provider</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    mainMarket<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>mainMarket<span class=\"token punctuation\">,</span>\n    isProcessing<span class=\"token punctuation\">,</span>\n    isChange<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getOptions</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">markets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>mainMarket<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'option'</span><span class=\"token punctuation\">,</span> markets <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onProcessing</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onProcessing</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">setIsChange</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StockContext.Provider</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"4-느낀점\"><a href=\"#4-%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"4 느낀점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 느낀점</h2>\n<p>하위 컴포넌트에 전달하는 방식을 깔끔하게 고칠 수 있다는 것은 굉장히 메리트 있으며, Redux처럼 Global로 선언해서 관리할 수도 있다. 다만, 아직까지는 Redux를 대체하기에는 아직 완벽하지 않은 부분들이 있다. Action 기반의 앱 업데이트, Redux-Saga 등 비동기적처리하는 부분은 아직까지는 Redux를 사용해야하는 한계가 있다.\n따라서 복잡한 depth가 이루어진 부분을 우선 대체한 후, 추후 업데이트를 확인하면 좋을 것 같다.</p>","frontmatter":{"title":"useContext를 사용하여 코드를 개선해보자.","date":"June 11, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react/use-context/","previous":{"fields":{"slug":"/algorithm/programmers-stations-install/"},"frontmatter":{"title":"programmers - 기지국 설치","category":"algorithm"}},"next":null}}